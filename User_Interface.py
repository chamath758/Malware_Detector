import sys
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QFileDialog, QVBoxLayout, QWidget, QMessageBox, QProgressBar, QAction, QMenu, QMenuBar
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QIcon
import shutil
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPalette
from PyQt5.QtCore import QPropertyAnimation


# Define the path for quarantine_folder
quarantine_folder = r'C:\Users\ASUS\Desktop\IW Assingment\Test_one\Quarantine'
if not os.path.exists(quarantine_folder):
    os.makedirs(quarantine_folder)

# Import the malware detection and quarantine functions from malware_detection.py
from Functions import extract_pe_information, detect_malware

class WorkerThread(QThread):
    update_signal = pyqtSignal(int)
    finish_signal = pyqtSignal()

    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path

    def run(self):
        for i in range(1, 101):
            self.update_signal.emit(i)
            self.msleep(50)
        self.finish_signal.emit()

class AntivirusUI(QMainWindow):
    def __init__(self):
        super().__init__()

        self.initUI()
        self.worker_thread = None  # Initialize worker thread as None

    def initUI(self):
        self.setWindowTitle("Malware_Scanner")
        self.setGeometry(0, 0, 600, 400)  # Set a default size
        self.setMinimumSize(600, 400)  # Set a minimum size

        instructions_label = QLabel(
            "<html>"
            "<div style='background-color: #bccbf5; padding: 10px; border-radius: 10px;'>"
            "<p style='font-size: 16px; font-weight: bold; color: #333;'>Instructions:</p>"
            "<ul>"
            "<li><span style='color: #333;'>Click 'Scan File'</span> to select a file to scan for malware.</li>"
            "<li><span style='color: #333;'>Wait for the scan to complete.</span></li>"
            "<li><span style='color: #333;'>Follow the on-screen instructions.</span></li>"
            "</ul>"
            "<p style='font-weight: bold;'> Supported File extension .acm, .ax, .cpl, .dll, .drv, .efi, .exe, .mui, .ocx, .scr, .sys, .tsp </p>"
            "</div>"
            "</html>", self)
        instructions_label.setAlignment(Qt.AlignCenter)
        palette = QPalette()
        palette.setColor(QPalette.Foreground, Qt.darkGray)
        instructions_label.setPalette(palette)

        

        # Apply a fade-in animation to the instructions label
        self.fade_in_animation = QPropertyAnimation(instructions_label, b'windowOpacity')
        self.fade_in_animation.setDuration(1000)  # Animation duration in milliseconds
        self.fade_in_animation.setStartValue(0.0)
        self.fade_in_animation.setEndValue(1.0)
        self.fade_in_animation.start()

        

        # Set an icon for the application (replace 'path_to_icon.ico' with the actual icon file path)
        icon_path = r'C:\Users\ASUS\Desktop\IW Assingment\Test_one\icons\icon1.png'
        self.setWindowIcon(QIcon(icon_path))

        # Create a menu bar
        menu_bar = self.menuBar()
        file_menu = menu_bar.addMenu("Exit")
        help_menu = menu_bar.addMenu("Help")

        # Create actions for the menu items
        exit_action = QAction("Exit", self)
        exit_action.triggered.connect(self.close)
        about_action = QAction("About", self)
        about_action.triggered.connect(self.show_about_dialog)

        # Add actions to the menu
        file_menu.addAction(exit_action)
        help_menu.addAction(about_action)

        # Set a background image for the application (replace 'path_to_background_image.jpg' with the actual image file path)
        background_image_path = r'C:\Users\ASUS\Desktop\IW Assingment\Test_one\Background\Background1.jpg'
        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)
        self.central_widget.setStyleSheet(f'background-image: url("{background_image_path}"); background-repeat: no-repeat; background-position: center; background-size: cover;')
        self.central_widget.setFixedSize(600, 400)

        self.layout = QVBoxLayout()

        self.scan_button = QPushButton("Scan File", self)
        self.scan_button.clicked.connect(self.scan_file)
        


        
        self.result_label = QLabel("", self)
        self.result_label.setAlignment(Qt.AlignCenter)

        self.progress_bar = QProgressBar(self)
        self.progress_bar.setVisible(False)

        self.layout.addWidget(self.scan_button)
        self.layout.addWidget(self.progress_bar)
        self.layout.addWidget(self.result_label)
        self.layout.addWidget(instructions_label)
        self.central_widget.setLayout(self.layout)

        self.central_widget.setLayout(self.layout)
        self.central_widget.setLayout(self.layout)
        self.central_widget.setLayout(self.layout)

    def show_about_dialog(self):
        about_text = "Malware Scanner\nVersion 1.0\n\nÂ© 2023 BeedleTec"
        QMessageBox.about(self, "About", about_text)

    def scan_file(self):
        if self.worker_thread and self.worker_thread.isRunning():
            return  # Don't start a new scan if the previous one is running

        file_path, _ = QFileDialog.getOpenFileName(self, "Open File", "", "All Files (*);;PE Files (*.exe)")

        if file_path:
            self.progress_bar.setValue(0)
            self.progress_bar.setVisible(True)

            def finish_scan():
                self.progress_bar.setVisible(False)

                extracted_features = extract_pe_information(file_path)
                prediction = detect_malware(extracted_features)

                if prediction == 1:
                    # Display a confirmation message
                    reply = QMessageBox.question(self, 'Malware Detected', 'Malware Detected. Do you want to quarantine this file?', QMessageBox.Yes | QMessageBox.No)
                    if reply == QMessageBox.Yes:
                        if self.quarantine_file(file_path):
                            self.result_label.setText("File quarantined. You are now safe.")
                        else:
                            self.result_label.setText("Failed to quarantine the file.")
                    else:
                        self.result_label.setText("You have been at risk.")
                else:
                    self.result_label.setText("No Malware Detected")

            self.worker_thread = WorkerThread(file_path)
            self.worker_thread.update_signal.connect(self.update_progress)
            self.worker_thread.finish_signal.connect(finish_scan)
            self.worker_thread.start()

    def update_progress(self, value):
        self.progress_bar.setValue(value)

    def quarantine_file(self, file_path):
        try:
            new_file_path = os.path.join(quarantine_folder, os.path.basename(file_path))
            new_extension = ".malware"
            new_file_path_with_extension = os.path.splitext(new_file_path)[0] + new_extension
            shutil.move(file_path, new_file_path_with_extension)
            return True
        except Exception as e:
            print("Error during quarantine:", e)
            return False

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = AntivirusUI()
    window.show()
    sys.exit(app.exec_())

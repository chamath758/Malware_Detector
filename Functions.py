import pefile
import pickle
import pandas as pd


# Load the pre-trained machine learning model for malware detection
model_filename = r'C:\Users\ASUS\Desktop\IW Assingment\Test_one\malware_detection_model.pkl'
with open(model_filename, 'rb') as model_file:
    loaded_model = pickle.load(model_file)



# Function to extract PE information from a downloaded PE file
def extract_pe_information(file_path):
    pe = None
    features = {}  # Dictionary to store the extracted features

    try:
        # Open the specified PE file
        pe = pefile.PE(file_path)

        # Extract the desired information
        features["e_magic"] = pe.DOS_HEADER.e_magic
        features["e_cblp"] = pe.DOS_HEADER.e_cblp
        features["e_cp"] = pe.DOS_HEADER.e_cp
        features["e_crlc"] = pe.DOS_HEADER.e_crlc
        features["e_cparhdr"] = pe.DOS_HEADER.e_cparhdr
        features["e_minalloc"] = pe.DOS_HEADER.e_minalloc
        features["e_maxalloc"] = pe.DOS_HEADER.e_maxalloc
        features["e_ss"] = pe.DOS_HEADER.e_ss
        features["e_sp"] = pe.DOS_HEADER.e_sp
        features["e_csum"] = pe.DOS_HEADER.e_csum
        features["e_ip"] = pe.DOS_HEADER.e_ip
        features["e_cs"] = pe.DOS_HEADER.e_cs
        features["e_lfarlc"] = pe.DOS_HEADER.e_lfarlc
        features["e_ovno"] = pe.DOS_HEADER.e_ovno
        features["e_oemid"] = pe.DOS_HEADER.e_oemid
        features["e_oeminfo"] = pe.DOS_HEADER.e_oeminfo
        features["e_lfanew"] = pe.DOS_HEADER.e_lfanew
        features["Machine"] = pe.FILE_HEADER.Machine
        features["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        features["TimeDateStamp"] = pe.FILE_HEADER.TimeDateStamp
        features["PointerToSymbolTable"] = pe.FILE_HEADER.PointerToSymbolTable
        features["NumberOfSymbols"] = pe.FILE_HEADER.NumberOfSymbols
        features["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        features["Characteristics"] = pe.FILE_HEADER.Characteristics
        features["Magic"] = pe.OPTIONAL_HEADER.Magic
        features["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        features["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        features["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
        features["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        features["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        features["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        features["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode
        features["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
        features["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
        features["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
        features["MajorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        features["MinorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        features["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        features["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        features["MajorSubsystemVersion"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        features["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        features["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        features["CheckSum"] = pe.OPTIONAL_HEADER.CheckSum
        features["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        features["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        features["DllCharacteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics
        features["SizeOfStackReserve"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        features["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        features["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        features["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        features["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        features["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

    except Exception as e:
        print(f"An error occurred while extracting PE information: {e}")
    finally:
        if pe is not None:
            pe.close()

    return pd.Series(features)

# Function to perform malware detection using the loaded model
def detect_malware(extracted_features):
    if extracted_features.empty:
        return 0  # Return 0 if feature extraction failed

    # Use the loaded model to make a prediction based on the extracted features
    prediction = loaded_model.predict([extracted_features])
    return prediction





     


    
